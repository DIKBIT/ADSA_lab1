#include <stdio.h>
#include <stdlib.h>


void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}


void bucketSort(int arr[], int n) {
    int i, j;

    
    int min = arr[0], max = arr[0];
    for (i = 1; i < n; i++) {
        if (arr[i] < min) min = arr[i];
        if (arr[i] > max) max = arr[i];
    }

    int bucketCount = 10;  // Number of buckets (can be tuned)
    int bucketRange = ((max - min) / bucketCount) + 1;

    
    int *buckets[bucketCount];
    int bucketSizes[bucketCount];
    for (i = 0; i < bucketCount; i++) {
        buckets[i] = (int *)malloc(n * sizeof(int));
        bucketSizes[i] = 0;
    }

   
    for (i = 0; i < n; i++) {
        int bi = (arr[i] - min) / bucketRange; // shift by min
        buckets[bi][bucketSizes[bi]++] = arr[i];
    }

    
    for (i = 0; i < bucketCount; i++) {
        if (bucketSizes[i] > 0)
            insertionSort(buckets[i], bucketSizes[i]);
    }


    int index = 0;
    for (i = 0; i < bucketCount; i++) {
        for (j = 0; j < bucketSizes[i]; j++) {
            arr[index++] = buckets[i][j];
        }
        free(buckets[i]); // Free memory
    }
}


void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}


int main() {
    int n;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter %d integers (can be negative): ", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Original array: ");
    printArray(arr, n);

    bucketSort(arr, n);

    printf("Sorted array:   ");
    printArray(arr, n);

    return 0;
}
