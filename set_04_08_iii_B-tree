#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#define T 3

typedef struct BTreeNode {
    int keys[2*T-1], n;
    struct BTreeNode *c[2*T];
    bool leaf;
} BTreeNode;

BTreeNode* newNode(bool leaf) {
    BTreeNode* node = (BTreeNode*)malloc(sizeof(BTreeNode));
    node->leaf = leaf; node->n = 0;
    for (int i=0;i<2*T;i++) node->c[i]=NULL;
    return node;
}
BTreeNode* createTree(){ return newNode(true); }

BTreeNode* search(BTreeNode* x,int k){
    int i=0; if(!x) return NULL;
    while(i<x->n && k>x->keys[i]) i++;
    if(i<x->n && k==x->keys[i]) return x;
    return x->leaf?NULL:search(x->c[i],k);
}

void split(BTreeNode* x,int i,BTreeNode* y){
    BTreeNode* z=newNode(y->leaf); z->n=T-1;
    for(int j=0;j<T-1;j++) z->keys[j]=y->keys[j+T];
    if(!y->leaf) for(int j=0;j<T;j++) z->c[j]=y->c[j+T];
    y->n=T-1;
    for(int j=x->n;j>=i+1;j--) x->c[j+1]=x->c[j];
    x->c[i+1]=z;
    for(int j=x->n-1;j>=i;j--) x->keys[j+1]=x->keys[j];
    x->keys[i]=y->keys[T-1]; x->n++;
}

void insertNonFull(BTreeNode* x,int k){
    int i=x->n-1;
    if(x->leaf){
        while(i>=0 && k<x->keys[i]){ x->keys[i+1]=x->keys[i]; i--; }
        x->keys[i+1]=k; x->n++;
    }else{
        while(i>=0 && k<x->keys[i]) i--;
        if(x->c[i+1]->n==2*T-1){
            split(x,i+1,x->c[i+1]);
            if(k>x->keys[i+1]) i++;
        }
        insertNonFull(x->c[i+1],k);
    }
}

BTreeNode* insert(BTreeNode* r,int k){
    if(r->n==2*T-1){
        BTreeNode* s=newNode(false);
        s->c[0]=r; split(s,0,r);
        int i=(s->keys[0]<k); insertNonFull(s->c[i],k);
        return s;
    } insertNonFull(r,k); return r;
}

void traverse(BTreeNode* r){
    if(!r) return; int i;
    for(i=0;i<r->n;i++){ if(!r->leaf) traverse(r->c[i]); printf("%d ",r->keys[i]); }
    if(!r->leaf) traverse(r->c[i]);
}

void freeTree(BTreeNode* r){
    if(!r) return;
    if(!r->leaf) for(int i=0;i<=r->n;i++) freeTree(r->c[i]);
    free(r);
}

int main(){
    int keys[]={10,20,5,6,12,30,7,17},n=8;
    BTreeNode* root=createTree();
    for(int i=0;i<n;i++) root=insert(root,keys[i]);
    printf("B-Tree traversal: "); traverse(root); printf("\n");
    int s=6; printf("Key %d %s\n",s,search(root,s)?"found":"not found");
    freeTree(root);
}
