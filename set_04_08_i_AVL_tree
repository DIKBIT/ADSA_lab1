#include <stdio.h>
#include <stdlib.h>

#define H(n) ((n)?(n)->h:0)
#define M(a,b) ((a)>(b)?(a):(b))

typedef struct N {
    int k,h;
    struct N *l,*r;
} N;

N* nn(int k){ N* n=malloc(sizeof(N)); n->k=k;n->h=1;n->l=n->r=NULL; return n; }

N* rr(N* y){ N* x=y->l;N* t=x->r; x->r=y;y->l=t;
 y->h=M(H(y->l),H(y->r))+1; x->h=M(H(x->l),H(x->r))+1; return x; }

N* lr(N* x){ N* y=x->r;N* t=y->l; y->l=x;x->r=t;
 x->h=M(H(x->l),H(x->r))+1; y->h=M(H(y->l),H(y->r))+1; return y; }

int bal(N* n){ return n?H(n->l)-H(n->r):0; }

N* ins(N* n,int k){
    if(!n) return nn(k);
    if(k<n->k) n->l=ins(n->l,k);
    else if(k>n->k) n->r=ins(n->r,k);
    else return n;
    n->h=1+M(H(n->l),H(n->r));
    int b=bal(n);
    if(b>1&&k<n->l->k) return rr(n);
    if(b<-1&&k>n->r->k) return lr(n);
    if(b>1&&k>n->l->k){ n->l=lr(n->l); return rr(n);}
    if(b<-1&&k<n->r->k){ n->r=rr(n->r); return lr(n);}
    return n;
}

N* minN(N* n){ while(n->l) n=n->l; return n; }

N* del(N* r,int k){
    if(!r) return r;
    if(k<r->k) r->l=del(r->l,k);
    else if(k>r->k) r->r=del(r->r,k);
    else{
        if(!r->l||!r->r){
            N* t=r->l?r->l:r->r;
            if(!t){ free(r); return NULL; }
            *r=*t; free(t);
        }else{
            N* t=minN(r->r); r->k=t->k; r->r=del(r->r,t->k);
        }
    }
    r->h=1+M(H(r->l),H(r->r));
    int b=bal(r);
    if(b>1&&bal(r->l)>=0) return rr(r);
    if(b>1&&bal(r->l)<0){ r->l=lr(r->l); return rr(r);}
    if(b<-1&&bal(r->r)<=0) return lr(r);
    if(b<-1&&bal(r->r)>0){ r->r=rr(r->r); return lr(r);}
    return r;
}

N* srch(N* r,int k){
    if(!r||r->k==k) return r;
    return k<r->k?srch(r->l,k):srch(r->r,k);
}

void pre(N* r){ if(r){ printf("%d ",r->k); pre(r->l); pre(r->r);} }

void delTree(N* r){ if(r){ delTree(r->l); delTree(r->r); free(r);} }

int main(){
    N* root=NULL;
    root=ins(root,10);root=ins(root,20);root=ins(root,30);
    root=ins(root,40);root=ins(root,50);root=ins(root,25);

    printf("Preorder: "); pre(root); printf("\n");

    root=del(root,40);
    printf("After delete 40: "); pre(root); printf("\n");

    printf(srch(root,25)?"Found 25\n":"Not found\n");

    delTree(root);
}
