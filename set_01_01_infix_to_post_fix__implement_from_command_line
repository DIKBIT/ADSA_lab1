#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX 100

// Operator stack
char opStack[MAX];
int opTop = -1;

void pushOp(char c) {
    opStack[++opTop] = c;
}
char popOp() {
    return opStack[opTop--];
}
char peekOp() {
    return opStack[opTop];
}
int isEmptyOp() {
    return opTop == -1;
}

// Precedence of operators
int precedence(char op) {
    switch (op) {
        case '/': case '*': return 2;
        case '+': case '-': return 1;
        default: return 0;
    }
}

// Convert infix to postfix
void infixToPostfix(char infix[], char postfix[]) {
    int k = 0;
    int i=0;
    for (i = 0; infix[i] != '\0'; i++) {
        char c = infix[i];

        if (isdigit(c)) {
            postfix[k++] = c;  
        }
        else if (c == '(') {
            pushOp(c);
        }
        else if (c == ')') {
            while (!isEmptyOp() && peekOp() != '(') {
                postfix[k++] = popOp();
            }
            popOp();
        }
        else { 
            while (!isEmptyOp() && precedence(peekOp()) >= precedence(c)) {
                postfix[k++] = popOp();
            }
            pushOp(c);
        }
    }
    while (!isEmptyOp()) {
        postfix[k++] = popOp();
    }
    postfix[k] = '\0';
}

int valStack[MAX];
int valTop = -1;

void pushVal(int v) {
    valStack[++valTop] = v;
}
int popVal() {
    return valStack[valTop--];
}

// Evaluate postfix expression
int evaluatePostfix(char postfix[]) {
	int i=0;
    for (i = 0; postfix[i] != '\0'; i++) {
        char c = postfix[i];
        if (isdigit(c)) {
            pushVal(c - '0');
        }
        else {
            int b = popVal();
            int a = popVal();
            switch (c) {
                case '+': pushVal(a + b); break;
                case '-': pushVal(a - b); break;
                case '*': pushVal(a * b); break;
                case '/': pushVal(a / b); break;
            }
        }
    }
    return popVal();
}

int main() {
    char infix[MAX], postfix[MAX];

    printf("Enter an arithmetic expression (single-digit operands only): ");
    scanf("%s", infix);

    infixToPostfix(infix, postfix);

    printf("\nInfix   : %s", infix);
    printf("\nPostfix : %s", postfix);

    int result = evaluatePostfix(postfix);
    printf("\nResult  : %d\n", result);

    return 0;
}
