#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct Node {
    int data;
    struct Node *left, *right;
} Node;

Node* newNode(int v) {
    Node* n = malloc(sizeof(Node));
    n->data = v; n->left = n->right = NULL;
    return n;
}


Node* buildTree(int arr[], int n) {
    if (n == 0 || arr[0] == -1) return NULL;

    Node* nodes[n];
    for (int i = 0; i < n; i++)
        nodes[i] = (arr[i] == -1) ? NULL : newNode(arr[i]);

    for (int i = 0, j = 1; j < n; i++) {
        if (nodes[i]) {
            if (j < n) nodes[i]->left = nodes[j++];
            if (j < n) nodes[i]->right = nodes[j++];
        }
    }
    return nodes[0];
}


void preorder(Node* root) {
    if (!root) return;
    Node* stack[MAX]; int top = -1;
    stack[++top] = root;
    while (top >= 0) {
        Node* cur = stack[top--];
        printf("%d ", cur->data);
        if (cur->right) stack[++top] = cur->right;
        if (cur->left)  stack[++top] = cur->left;
    }
}

int main() {
    int n;
    printf("Enter number of nodes: ");
    scanf("%d", &n);

    int arr[n];
    printf("Enter values in level order (-1 for NULL):\n");
    for (int i = 0; i < n; i++) scanf("%d", &arr[i]);

    Node* root = buildTree(arr, n);

    printf("Preorder Traversal: ");
    preorder(root);
    return 0;
}
