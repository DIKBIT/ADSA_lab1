//push costly

#include <stdio.h>
#define SIZE 100

int s1[SIZE], s2[SIZE];
int top1 = -1, top2 = -1;

void push1(int x) { s1[++top1] = x; }
int pop1() { return s1[top1--]; }
void push2(int x) { s2[++top2] = x; }
int pop2() { return s2[top2--]; }

void enqueue(int x) { // costly push
    while (top1 != -1) push2(pop1());
    push1(x);
    while (top2 != -1) push1(pop2());
}

void dequeue() {
    if (top1 == -1) printf("Queue EMPTY!\n");
    else printf("Dequeued: %d\n", pop1());
}

void display() {
    if (top1 == -1) { printf("Queue EMPTY!\n"); return; }
    printf("Queue: ");
    for (int i = 0; i <= top1; i++) printf("%d ", s1[i]);
    printf("\n");
}

int main() {
    int ch, val;
    while (1) {
        printf("\n1.Enqueue 2.Dequeue 3.Display 4.Exit\nChoice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1: printf("Enter value: "); scanf("%d", &val); enqueue(val); break;
            case 2: dequeue(); break;
            case 3: display(); break;
            case 4: return 0;
        }
    }
}


//pop costly 

#include <stdio.h>
#define SIZE 100

int s1[SIZE], s2[SIZE];
int top1 = -1, top2 = -1;

void push1(int x) { s1[++top1] = x; }
int pop1() { return s1[top1--]; }
void push2(int x) { s2[++top2] = x; }
int pop2() { return s2[top2--]; }

void enqueue(int x) { // simple push
    push1(x);
}

void dequeue() { // costly pop
    if (top1 == -1) { printf("Queue EMPTY!\n"); return; }
    while (top1 != -1) push2(pop1());
    printf("Dequeued: %d\n", pop2());
    while (top2 != -1) push1(pop2());
}

void display() {
    if (top1 == -1) { printf("Queue EMPTY!\n"); return; }
    printf("Queue: ");
    for (int i = 0; i <= top1; i++) printf("%d ", s1[i]);
    printf("\n");
}

int main() {
    int ch, val;
    while (1) {
        printf("\n1.Enqueue 2.Dequeue 3.Display 4.Exit\nChoice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1: printf("Enter value: "); scanf("%d", &val); enqueue(val); break;
            case 2: dequeue(); break;
            case 3: display(); break;
            case 4: return 0;
        }
    }
}



